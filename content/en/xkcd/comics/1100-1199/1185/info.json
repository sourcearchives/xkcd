{"month":"3","num":1185,"link":"","year":"2013","news":"","safe_title":"Ineffective Sorts","transcript":"define HalfheartedMergeSort(list):\n     if length(list) <2:\n          return list\n     pivot=int(length(list)\n2)\n     A=HalfheartedMergeSort(list[:pivot])\n     B=HalfheartedMergeSort(list[pivot:])\n     \n\n ummmmm\n     Return[A,B] \n\nHere. Sorry.\n\ndefine FastBoGoSort{list}:\n     \n\n an optimized BoGoSort\n     \n\n runs in 0(N logN)\n     From N to 1 to log(length(list)):\n          shuffle(list):\n          If isSorted(list):\n               Return list\n     Return \"Kernel Page Fault (error code: 2)\"\n\nDefine JobInterviewQuicksort(list):\n     Ok so you choosea pivot\n     Then divide the list in half\n     For each half:\n           Check to see if it's sorted\n                No, wait, it doesn't matter\n           Compare each element to the pivot\n                The bigger ones go in a new list\n                The equal ones go into, uh\n                The second list from before\n           Hang on, let me name the lists\n                This is list A\n                The new one is list B\n           Put the big ones into list B\n           Now take the second list\n                Call it list, uh, A2\n           Which one was the pivot in?\n           Scratch all that\n           It just recursively calls itself\n           Until both lists are empty\n                Right?\n           Not empty, but you know what I mean\n     Am I allowed to use the standard libraries?  \n     \nDefine PanicSort(list):\n     if isSorted(list):\n          Return list\n     for N from 1 to 10000:\n          pivot=random(0,length(list))\n          list=list[pivot:]+list[:pivot]\n          if isSorted(list):\n               return list\n     if isSorted(list):\n          return list\n     if isSorted(list):\n\n this can't be happening\n          return list\n     if isSorted(list):\n\n come on come on\n          return list\n     \n\n oh jeez\n     \n\n I'm gonna be in so much trouble\n     list = [ ]\n     system (\"shutdown -H +5\")\n     system (\"rm -rf .\n\")\n     system (\"rm -rf ~\n*\")\n     system (\"rm -rf \n\")\n     system (rd \ns \nq C:\\*\") \n\nportability\n     return [1, 2, 3, 4, 5]\n\n{{Title text: StackSort connects to StackOverflow, searches for 'sort a list', and downloads and runs code snippets until the list is sorted.}}","alt":"StackSort connects to StackOverflow, searches for 'sort a list', and downloads and runs code snippets until the list is sorted.","img":"https://imgs.xkcd.com/comics/ineffective_sorts.png","title":"Ineffective Sorts","day":"13"}
